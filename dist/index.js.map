{"version":3,"sources":["index.js","object_iteration.js","curry.js","arrays.js","miscellaneous.js","nested_property_accessor.js","nested_property_setter.js","to_object.js"],"names":["object","callback","include_prototype_hierarchy_attributes","method_name","value","is_own_property","hasOwnProperty","curry","fn","args","length","more","each_until","visitor","target","items","Array","prototype","slice","call","index","continue_iteration","each_in_reverse_until","_each","direction","each","each_in_reverse","operators","reduce","initial_value_or_symbol","reducer_or_initial_value_for_symbolic_reduce","rest","pop","indexOf","symbol","initial_value","body","reduce_using_reducer","Function","apply","concat","reducer","start_index","undefined","accumulator","array","first_with_target","condition","result","match","find_first_in_direction","condition_or_target","isArray","last","first","any","none","filter","constraint","acc","val","push","map","mapper","flat_map","results","next_item","flatten","item","uniq_with_target_and_mapper","mapped","findIndex","uniq","mapper_or_target","true_for_all","max","value_resolver","max_value","item_value","default_comparer","a","b","sort_with_comparer_and_target","comparer","target_to_sort","sort","comparer_or_target","generate","number","_","fill","freeze","Object","prevent_modifications","the_target","preventExtensions","unless","block","create_immutable_builder","builder","instance","exclude_keys","keys_and_key_specs","normalized_specs","spec_or_key","key","spec","create_delegator_for_missing_methods","initial","missing_target","Proxy","get","property","actual_target","Reflect","has","values","keys","nested_property_accessor","dotted_accessor","current_target","next_attribute","split","nested_property_setter","attributes","target_path","join","last_attribute","default_key_mapper","data","id","core_to_object","key_mapper","cur","to_object","key_mapper_or_data"],"mappings":"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","file":"index.js","sourceRoot":"../lib","sourcesContent":["export { default } from './object_iteration';\n","export default (object, callback, include_prototype_hierarchy_attributes = false) => {\n  for (let method_name in object) {\n    const value = object[method_name];\n    const is_own_property = object.hasOwnProperty(method_name);\n\n    if (is_own_property || include_prototype_hierarchy_attributes)\n      callback(method_name, value, is_own_property);\n  }\n};\n","const curry = (fn, ...args) =>\n  fn.length <= args.length ? fn(...args) : (...more) => curry(fn, ...args, ...more);\n\nexport default curry;\n","import curry from '@developwithpassion/curry_js';\n\nexport const each_until = curry((visitor, target) => {\n  const items = Array.prototype.slice.call(target, 0);\n\n  for (let index = 0; index < items.length; index++) {\n    const continue_iteration = visitor(items[index], index, items);\n    if (typeof continue_iteration !== 'undefined' && continue_iteration !== null) {\n      if (continue_iteration === false) {\n        return;\n      }\n    }\n  }\n});\n\nexport const each_in_reverse_until = curry((visitor, target) => {\n  const items = Array.prototype.slice.call(target, 0);\n\n  for (let index = items.length - 1; index >= 0; index--) {\n    const continue_iteration = visitor(items[index], index, items);\n\n    if (typeof continue_iteration !== 'undefined' && continue_iteration !== null) {\n      if (continue_iteration === false) {\n        return;\n      }\n    }\n  }\n});\n\nconst _each = direction =>\n  curry((visitor, target) =>\n    direction((...args) => {\n      visitor(...args);\n    }, target)\n  );\n\nexport const each = _each(each_until);\n\nexport const each_in_reverse = _each(each_in_reverse_until);\n\nconst operators = ['+', '-', '/', '*'];\n\nexport const reduce = curry(\n  (initial_value_or_symbol, reducer_or_initial_value_for_symbolic_reduce, ...rest) => {\n    const target = rest.pop();\n\n    if (operators.indexOf(initial_value_or_symbol) > -1)\n      return reduce_using_operator.apply(\n        null,\n        [initial_value_or_symbol, reducer_or_initial_value_for_symbolic_reduce, target].concat(rest)\n      );\n\n    return reduce_using_reducer.apply(\n      null,\n      [reducer_or_initial_value_for_symbolic_reduce, initial_value_or_symbol, target].concat(rest)\n    );\n  }\n);\n\nfunction reduce_using_reducer(reducer, initial_value, target) {\n  let start_index = 0;\n\n  if (initial_value === undefined) {\n    initial_value = target[0];\n    start_index = 1;\n  }\n\n  let accumulator = initial_value;\n\n  each((value, index, array) => {\n    if (index >= start_index) {\n      accumulator = reducer(accumulator, value, index, array);\n    }\n  }, target);\n  return accumulator;\n}\n\nfunction reduce_using_operator(symbol, initial_value, target) {\n  const body = `return accumulator ${symbol}=current_value`;\n\n  const reducer = new Function('accumulator, current_value', body);\n\n  return reduce_using_reducer(reducer, initial_value, target);\n}\n\nconst first_with_target = curry((direction, condition, target) => {\n  let result = null;\n\n  direction((...args) => {\n    const match = condition(...args);\n\n    if (match) result = args[0];\n\n    return !match;\n  }, target);\n\n  return result;\n});\n\nfunction find_first_in_direction(direction) {\n  return (condition_or_target, ...rest) => {\n    if (Array.isArray(condition_or_target)) return condition_or_target[0] || null;\n    if (condition_or_target === null) return null;\n    const condition = condition_or_target;\n\n    return rest.length > 0\n      ? first_with_target(direction, condition, rest.pop())\n      : first_with_target(direction, condition);\n  };\n}\n\nexport const last = find_first_in_direction(each_in_reverse_until);\n\nexport const first = find_first_in_direction(each_until);\n\nexport const any = curry((condition, target) => !!first(condition, target));\n\nexport const none = curry((condition, target) => !any(condition, target));\n\nexport const filter = curry((constraint, target) =>\n  reduce(\n    [],\n    (acc, val, ...args) => {\n      if (constraint(val, ...args)) {\n        acc.push(val);\n      }\n      return acc;\n    },\n    target\n  )\n);\n\nexport const map = curry((mapper, target) =>\n  reduce(\n    [],\n    (acc, ...args) => {\n      acc.push(mapper(...args));\n      return acc;\n    },\n    target\n  )\n);\n\nexport const flat_map = curry((mapper, target) =>\n  reduce([], (results, next_item) => results.concat(mapper(next_item)), target)\n);\n\nconst flatten = flat_map(item => (Array.isArray(item) ? flatten(item) : [item]));\n\nconst uniq_with_target_and_mapper = curry((mapper, target) =>\n  filter((value, index) => {\n    const mapped = mapper(value);\n    const first_matching_index = target.findIndex(value => mapper(value) === mapped);\n    return index === first_matching_index;\n  }, target)\n);\n\nexport const uniq = (mapper_or_target, ...args) =>\n  args.length === 0 && Array.isArray(mapper_or_target)\n    ? uniq_with_target_and_mapper(val => val, mapper_or_target)\n    : uniq_with_target_and_mapper(mapper_or_target, ...args);\n\nexport const true_for_all = curry((condition, target) =>\n  reduce(true, (acc, ...args) => acc && condition(...args), target)\n);\n\nexport const max = curry((value_resolver, target) =>\n  reduce(\n    0,\n    (max_value, ...args) => {\n      const item_value = value_resolver(...args);\n      return item_value > max_value ? item_value : max_value;\n    },\n    target\n  )\n);\n\nconst default_comparer = (a, b) => (a < b ? -1 : a > b ? 1 : 0);\n\nconst sort_with_comparer_and_target = curry((comparer, target) => {\n  const target_to_sort = target || [];\n  const results = target_to_sort.slice(0);\n\n  results.sort(comparer);\n\n  return results;\n});\n\nexport const sort = (comparer_or_target, ...args) => {\n  if (comparer_or_target === null) return [];\n  if (Array.isArray(comparer_or_target))\n    return sort_with_comparer_and_target(default_comparer, comparer_or_target);\n\n  return sort_with_comparer_and_target(comparer_or_target, ...args);\n};\n\nexport const generate = (number, mapper) => map((_, index) => mapper(index), new Array(number).fill(null));\n\nexport default {\n  each,\n  each_until,\n  each_in_reverse,\n  each_in_reverse_until,\n  last,\n  first,\n  any,\n  none,\n  filter,\n  map,\n  flat_map,\n  flatten,\n  uniq,\n  true_for_all,\n  reduce,\n  sort,\n  max,\n  generate\n};\n","import each_property_pair from '@developwithpassion/simple_object_iterator_js';\nimport { any, map, reduce } from '@developwithpassion/arrays_js';\nimport curry from '@developwithpassion/curry_js';\n\nexport const freeze = Object.freeze;\n\nexport const prevent_modifications = the_target => {\n  freeze(the_target);\n  Object.preventExtensions(the_target);\n  return the_target;\n};\n\nexport const unless = (condition, block) => {\n  if (condition) return;\n  block();\n};\n\nexport const create_immutable_builder = builder => (...args) => {\n  const instance = builder.apply(null, args);\n  prevent_modifications(instance);\n  return instance;\n};\n\nexport const exclude_keys = curry((keys_and_key_specs, target) => {\n  const normalized_specs = map(\n    spec_or_key => (typeof spec_or_key === 'string' ? value => value === spec_or_key : spec_or_key),\n    keys_and_key_specs\n  );\n\n  const result = {};\n\n  each_property_pair(target, (key, value) => {\n    if (!any(spec => spec(key), normalized_specs, target)) result[key] = value;\n  });\n\n  return result;\n});\n\nexport const create_delegator_for_missing_methods = (initial, missing_target) =>\n  new Proxy(initial, {\n    get(object, property) {\n      let actual_target = Reflect.has(object, property) ? object : missing_target;\n      return Reflect.get(actual_target, property);\n    }\n  });\n\nexport const values = target =>\n  reduce(\n    [],\n    (acc, key) => {\n      acc.push(target[key]);\n      return acc;\n    },\n    Object.keys(target)\n  );\n\nexport default {\n  freeze,\n  values,\n  prevent_modifications,\n  unless,\n  create_immutable_builder,\n  create_delegator_for_missing_methods,\n  exclude_keys\n};\n","import { reduce } from '@developwithpassion/arrays_js';\nimport curry from '@developwithpassion/curry_js';\n\nexport const nested_property_accessor = curry((dotted_accessor, object) =>\n  reduce(\n    object,\n    (current_target, next_attribute) => current_target[next_attribute],\n    dotted_accessor.split('.')\n  )\n);\n","import curry from '@developwithpassion/curry_js';\nimport { nested_property_accessor } from './nested_property_accessor';\n\nexport const nested_property_setter = curry((dotted_accessor, value, object) => {\n  const attributes = dotted_accessor.split('.');\n  const traversal_attributes =\n    attributes.length > 1 ? attributes.slice(0, attributes.length - 1) : attributes;\n  const target_path = traversal_attributes.join('.');\n  const last_attribute = attributes[attributes.length - 1];\n\n  const target = attributes.length > 1 ? nested_property_accessor(target_path, object) : object;\n\n  target[last_attribute] = value;\n\n  return object;\n});\n","import { reduce } from '@developwithpassion/arrays_js';\nimport curry from '@developwithpassion/curry_js';\n\nconst default_key_mapper = data => data.id;\n\nconst core_to_object = curry((key_mapper, data) =>\n  reduce(\n    {},\n    (acc, cur) => {\n      acc[key_mapper(cur)] = cur;\n      return acc;\n    },\n    data\n  )\n);\n\nexport const to_object = (key_mapper_or_data, ...rest) => {\n  if (Array.isArray(key_mapper_or_data)) return core_to_object(default_key_mapper, key_mapper_or_data);\n  return core_to_object(key_mapper_or_data, ...rest);\n};\n"]}