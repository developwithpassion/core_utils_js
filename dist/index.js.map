{"version":3,"sources":["index.js","object_iteration.js","curry.js","arrays.js","miscellaneous.js","nested_property_accessor.js","nested_property_setter.js","to_object.js"],"names":["object","callback","include_prototype_hierarchy_attributes","method_name","value","is_own_property","hasOwnProperty","curry","fn","args","length","more","each_until","visitor","target","items","Array","prototype","slice","call","index","continue_iteration","each_in_reverse_until","_each","direction","each","each_in_reverse","reduce","initial_value","reducer","accumulator","array","first_with_target","condition","result","match","find_first_in_direction","condition_or_target","isArray","rest","pop","last","first","any","none","all","acc","filter","constraint","val","push","map","mapper","flat_map","results","next_item","concat","flatten","item","uniq_with_target_and_mapper","mapped","findIndex","uniq","mapper_or_target","max","max_value","item_value","min","value_resolver","processingFirstElement","min_value","default_comparer","a","b","sort_with_comparer_and_target","comparer","target_to_sort","sort","comparer_or_target","generate","number","_","fill","true_for_all","freeze","Object","prevent_modifications","the_target","preventExtensions","unless","block","create_immutable_builder","builder","instance","apply","exclude_keys","keys_and_key_specs","normalized_specs","spec_or_key","key","spec","create_delegator_for_missing_methods","initial","missing_target","Proxy","get","property","actual_target","Reflect","has","values","keys","nested_property_accessor","dotted_accessor","current_target","next_attribute","split","nested_property_setter","attributes","target_path","join","last_attribute","default_key_mapper","id","to_object","key_mapper","data","cur"],"mappings":"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","file":"index.js","sourceRoot":"../lib","sourcesContent":["export { default } from './object_iteration';\n","export default (object, callback, include_prototype_hierarchy_attributes = false) => {\n  for (let method_name in object) {\n    const value = object[method_name];\n    const is_own_property = object.hasOwnProperty(method_name);\n\n    if (is_own_property || include_prototype_hierarchy_attributes)\n      callback(method_name, value, is_own_property);\n  }\n};\n","const curry = (fn, ...args) =>\n  fn.length <= args.length ? fn(...args) : (...more) => curry(fn, ...args, ...more);\n\nexport default curry;\n","import curry from '@developwithpassion/curry_js';\n\n/**\n * A visitor processes each element in a data structure. A return value of false\n * to the caller will cause iteration to stop.\n * @callback each~Visitor\n * @param {any} item - Item that is currently being processed\n * @param {Number} [index] - Index of the item that is being processed\n * @param {Array} [target] - Array that is currently being iterated over\n * @returns {undefined|Boolean} - Returning a value of false will cause the iterator to stop iterating\n */\n\nexport const each_until = curry((visitor, target) => {\n  const items = Array.prototype.slice.call(target, 0);\n\n  for (let index = 0; index < items.length; index++) {\n    const continue_iteration = visitor(items[index], index, items);\n    if (continue_iteration === false) return;\n  }\n});\n\nexport const each_in_reverse_until = curry((visitor, target) => {\n  const items = Array.prototype.slice.call(target, 0);\n\n  for (let index = items.length - 1; index >= 0; index--) {\n    const continue_iteration = visitor(items[index], index, items);\n    if (continue_iteration === false) return;\n  }\n});\n\nconst _each = direction =>\n  curry((visitor, target) =>\n    direction((...args) => {\n      visitor(...args);\n    }, target)\n  );\n\n/**\n * This function is used to iterate over every element in an array\n *\n * @param {each~Visitor} visitor a function to invoke against each element in the array.\n *\n *\n * @param {Array} target for the function\n *\n * @example <caption>Basic usage with a visitor that will log every element in the array</caption>\n * let numbers = [1,2,3,4]\n * each_until(console.log.bind(console), numbers)\n *\n * @example <caption>Basic usage with the index provided for each item</caption>\n * let numbers = [1,2,3,4]\n * each_until((val, index) => { console.log(`${val} - ${index}`)}, numbers)\n *\n * @example <caption>Iterate over a set of numbers, stop when the number 5 has been processed</caption>\n * let numbers = [3,4,5,7,10,11]\n * each_until((val) => { console.log(val); return val !== 5}, numbers)\n *\n */\nexport const each = _each(each_until);\n\n/**\n * This function is used to iterate over every element in an array in reverse\n *\n * @param {each~Vistor} visitor a function to invoke against each element in the array.\n *\n *\n * @param {Array} target for the function\n *\n * @example <caption>Basic usage with a visitor that will log every element in the array</caption>\n * let numbers = [1,2,3,4]\n * each_in_reverse(console.log.bind(console), numbers)\n *\n * @example <caption>Basic usage with the index provided for each item</caption>\n * let numbers = [1,2,3,4]\n * each_in_reverse((val, index) => { console.log(`${val} - ${index}`)}, numbers)\n *\n * @example <caption>Iterate over a set of numbers, stop when the number 5 has been processed</caption>\n * let numbers = [3,4,5,7,10,11]\n * each_in_reverse((val) => { console.log(val); return val !== 5}, numbers)\n *\n */\nexport const each_in_reverse = _each(each_in_reverse_until);\n\n/**\n * An reducer processes each element in a data structure and returns the result of processing\n * the element along with an accumulator that is being adjusted as each item is being processed\n * @callback reduce~Reducer\n * @param {any} accumulator - Result that holds the accumulated result that has been built up so far\n * @param {any} item - Current item being processed\n * @param {Number} [index] - Index of the item that is being processed\n * @param {Array} [array] - Target array that is being processed\n * @returns {any} - Returns the accumulator value that was built up\n */\n\n/**\n * Performs a {@link https://en.wikipedia.org/wiki/Fold_(higher-order_function) fold}\n *\n * @param {any} initial_value - The initial result of the accumulator\n * @param {reduce~Reducer} visitor a function to invoke against each element in the array.\n * @param {Array} target - Array containing items to be folded\n *\n * @example <caption>Summing all numbers in an array</caption>\n * let numbers = [1,2,3,4]\n * let result = reduce(0, (sum, val) => sum + val, numbers)\n * console.log(result) // 10\n *\n * @example <caption>Determining if all numbers are even</caption>\n * let numbers = [2,4,6,7,8]\n * let result = reduce(true, (is_even, val) => is_even && val % 2 === 0, numbers)\n * console.log(result) // false\n *\n */\nexport const reduce = curry((initial_value, reducer, target) => {\n  let accumulator = initial_value;\n\n  each((value, index, array) => {\n    accumulator = reducer(accumulator, value, index, array);\n  }, target);\n  return accumulator;\n});\n\nconst first_with_target = curry((direction, condition, target) => {\n  let result = null;\n\n  direction((...args) => {\n    const match = condition(...args);\n\n    if (match) result = args[0];\n\n    return !match;\n  }, target);\n\n  return result;\n});\n\nconst find_first_in_direction = direction => (condition_or_target, ...rest) => {\n  if (Array.isArray(condition_or_target)) return condition_or_target[0] || null;\n  if (condition_or_target == null) return null;\n  const condition = condition_or_target;\n\n  return rest.length > 0\n    ? first_with_target(direction, condition, rest.pop())\n    : first_with_target(direction, condition);\n};\n\n/**\n * An Predicate matches an item\n * @callback match~Predicate\n * @param {any} item - Item to evaluate\n * @param {Number} [index] - Index of the item that is being processed\n * @param {Array} [array] - Target array that is being processed\n * @returns {Boolean} - Whether the item matches the necessary criteria\n */\n\n/**\n * Find the last item in an array.\n * If a {@link https://en.wikipedia.org/wiki/Predicate_(mathematical_logic) predicate}\n * is provided, the predicate will be used to find the last item that matches the predicate.\n *\n * @param {match~Predicate} [condition] - Condition used to match the item, if not provided\n * last will return the last element in the array\n * @param {Array} target - Array containing items to be checked\n *\n * @example <caption>Get the last item in the array</caption>\n * let numbers = [1,2,3,4]\n * let result = last(numbers);\n * console.log(result) // 4\n *\n * @example <caption>Get the last even number in the array</caption>\n * let numbers = [1,2,3,4, 8, 9]\n * let result = last(val => val % 2 === 0, numbers);\n * console.log(result) // 8\n *\n */\nexport const last = find_first_in_direction(each_in_reverse_until);\n\n/**\n * Find the first item in an array.\n * If a {@link https://en.wikipedia.org/wiki/Predicate_(mathematical_logic) predicate}\n * is provided, the predicate will be used to find the first item that matches the predicate.\n *\n * @param {match~Predicate} [condition] - Condition used to match the item, if not provided\n * first will return the first element in the array\n * @param {Array} target - Array containing items to be checked\n *\n * @example <caption>Get the first item in the array</caption>\n * let numbers = [1,2,3,4]\n * let result = first(numbers);\n * console.log(result) // 1\n *\n * @example <caption>Get the first even number in the array</caption>\n * let numbers = [1,2,3,4, 8, 9]\n * let result = first(val => val % 2 === 0, numbers);\n * console.log(result) // 2\n *\n */\nexport const first = find_first_in_direction(each_until);\n\n/**\n * Determine if any items in the array match the predicate. As soon as a match\n * is found, the remainder of the list will not be processed.\n *\n * @param {match~Predicate} [condition] - Condition used to match the item\n * @param {Array} target - Array containing items to be checked\n *\n * @example <caption>Check if any numbers in an array are greater than 0</caption>\n * let numbers = [1,2,3,4]\n * let result = any(val => val > 0, numbers);\n * console.log(result) // true\n *\n */\nexport const any = curry((condition, target) => !!first(condition, target));\n\n/**\n * Determine if none of the items in the array match the predicate. As soon as a match\n * is found, the remainder of the list will not be processed.\n *\n * @param {match~Predicate} [condition] - Condition used to match the item\n * @param {Array} target - Array containing items to be checked\n *\n * @example <caption>Check if none of the numbers are greater than 0</caption>\n * let numbers = [1,2,3,4]\n * let result = none(val => val > 0, numbers);\n * console.log(result) // false\n *\n */\nexport const none = curry((condition, target) => !any(condition, target));\n\n/**\n * Determine if all of the items in the array match the predicate. As soon as a match\n * is not found, the remainder of the list will not be processed.\n *\n * @param {match~Predicate} [condition] - Condition used to match the item\n * @param {Array} target - Array containing items to be checked\n *\n * @example <caption>Check if all of the numbers are even</caption>\n * let numbers = [1,2,3,4]\n * let result = all(val => val % 2 === 0, numbers);\n * console.log(result) // false\n *\n */\nexport const all = curry((condition, target) =>\n  reduce(true, (acc, ...args) => acc && condition(...args), target)\n);\n\n/**\n * Filter the array to return an array containing all items that match\n * the predicate.\n *\n * @param {match~Predicate} constraint - Condition used to match the item\n * @param {Array} target - Array containing items to be checked\n *\n * @example <caption>Filter for all even numbers</caption>\n * let numbers = [1,2,3,4]\n * let result = filter(val => val % 2 === 0, numbers);\n * console.log(result) // [2, 4]\n *\n */\nexport const filter = curry((constraint, target) =>\n  reduce(\n    [],\n    (acc, val, ...args) => {\n      if (constraint(val, ...args)) {\n        acc.push(val);\n      }\n      return acc;\n    },\n    target\n  )\n);\n\n/**\n * @callback map~Mapper\n * @param {any} item - Item to map\n * @param {Number} [index] - Index of the item that is being processed\n * @param {Array} [array] - Target array that is being processed\n * @returns {any} - Result of mapping\n */\n\n/**\n * Perform a map over each item in the array and return an\n * array containing the results of each map operation.\n *\n * @param {map~Mapper} constraint - Condition used to match the item\n * @param {Array} target - Array containing items to be checked\n *\n * @example <caption>Double all numbers in an array</caption>\n * let numbers = [1,2,3,4]\n * let result = map(val => val * 2, numbers);\n * console.log(result) // [2, 4, 6, 8]\n *\n */\nexport const map = curry((mapper, target) =>\n  reduce(\n    [],\n    (acc, ...args) => {\n      acc.push(mapper(...args));\n      return acc;\n    },\n    target\n  )\n);\n\n/**\n * Perform a map over each item in the array, results of a map operation\n * will be flattened to a singular array, in the event that each map\n * operation itself results in an array result.\n *\n * @param {map~Mapper} constraint - Condition used to match the item\n * @param {Array} target - Array containing items to be checked\n *\n * @example <caption>Gets an array of the numbers with their doubles</caption>\n * let numbers = [1,2,3,4]\n * let result = map(val => [val, val * 2], numbers);\n * console.log(result) // [1, 2, 2, 4, 3, 6, 4 , 8]\n *\n */\nexport const flat_map = curry((mapper, target) =>\n  reduce([], (results, next_item) => results.concat(mapper(next_item)), target)\n);\n\n/**\n * Flatten an array that may contain nested arrays into a singular array\n *\n * @param {Array} target - Array that may contain nested arrays\n *\n * @example <caption>Gets an array of the numbers with their doubles</caption>\n * let numbers = [1, 2, [4, 5, 6, [7, 8, 9]]];\n * let result = flatten(numbers);\n * console.log(result) // [1, 2, 4, 5, 6, 7, 8, 9]\n *\n */\nexport const flatten = flat_map(item => (Array.isArray(item) ? flatten(item) : [item]));\n\nconst uniq_with_target_and_mapper = curry((mapper, target) =>\n  filter((value, index) => {\n    const mapped = mapper(value);\n    const first_matching_index = target.findIndex(value => mapper(value) === mapped);\n    return index === first_matching_index;\n  }, target)\n);\n\n/**\n * Return all unique items in an array. If a mapper is provided, the result of the mapper\n * will become the selector that is used to determine uniqueness.\n *\n * @param {Array | map~Mapper} mapper_or_target - If a mapper is provided, the result\n * of the mapper will become the value for the uniqueness check. If no mapper\n * is provided, uniq will just return each item in the list that is unique\n * following normal rules of equality.\n *\n * @example <caption>Gets an array of the numbers with their doubles</caption>\n * let numbers = [1, 2, 2, 3, 3, 4];\n * let result = uniq(numbers);\n * console.log(result) // [1, 2, 3, 4]\n *\n * @example <caption>Gets all people of different ages</caption>\n * let people = [\n *   { name: 'Person 1', age: 10 },\n *   { name: 'Person 2', age: 10 },\n *   { name: 'Person 3', age: 11 },\n *   { name: 'Person 4', age: 12 },\n * ];\n * let result = uniq(({age}) => age, people);\n * console.log(result) // [ {..., name: 'Person 1}, { ..., name: 'Person 3'}, { ..., name: 'Person 4'} ]\n *\n */\nexport const uniq = (mapper_or_target, ...args) =>\n  args.length === 0 && Array.isArray(mapper_or_target)\n    ? uniq_with_target_and_mapper(val => val, mapper_or_target)\n    : uniq_with_target_and_mapper(mapper_or_target, ...args);\n\n/**\n * Return max of all items in the array using the mapper to\n * map the value being used for the calculation\n *\n * @param {map~Mapper} mapper - Mapper used to map the value used for\n * the max calculation.\n * @param {Array} target - Target array\n *\n * @example <caption>Get the max number in an array</caption>\n * let numbers = [1, 2, 3, 10, 5];\n * let result = max(val => val, numbers);\n * console.log(result) // 10\n *\n * @example <caption>Get the age of the oldest person</caption>\n * let people = [\n *   { name: 'Person 1', age: 10 },\n *   { name: 'Person 2', age: 10 },\n *   { name: 'Person 3', age: 11 },\n *   { name: 'Person 4', age: 12 },\n * ];\n * let result = max(({age}) => age, people);\n * console.log(result) // 12\n *\n */\nexport const max = curry((mapper, target) =>\n  reduce(\n    0,\n    (max_value, ...args) => {\n      const item_value = mapper(...args);\n      return item_value > max_value ? item_value : max_value;\n    },\n    target\n  )\n);\n\n/**\n * Return min of all items in the array using the mapper to\n * map the value being used for the calculation\n *\n * @param {map~Mapper} mapper - Mapper used to map the value used for\n * the min calculation.\n * @param {Array} target - Target array\n *\n * @example <caption>Get the min number in an array</caption>\n * let numbers = [1, 2, 3, 10, 5];\n * let result = min(val => val, numbers);\n * console.log(result) // 1\n *\n * @example <caption>Get the age of the youngest person</caption>\n * let people = [\n *   { name: 'Person 1', age: 10 },\n *   { name: 'Person 2', age: 10 },\n *   { name: 'Person 3', age: 11 },\n *   { name: 'Person 4', age: 12 },\n * ];\n * let result = min(({age}) => age, people);\n * console.log(result) // 10\n *\n */\nexport const min = curry((value_resolver, target) => {\n  let processingFirstElement = true;\n\n  return reduce(\n    0,\n    (min_value, ...args) => {\n      let item_value = value_resolver(...args);\n\n      if (processingFirstElement) {\n        processingFirstElement = false;\n        return item_value;\n      }\n\n      return item_value < min_value ? item_value : min_value;\n    },\n    target\n  );\n});\n\nconst default_comparer = (a, b) => (a < b ? -1 : a > b ? 1 : 0);\n\nconst sort_with_comparer_and_target = curry((comparer, target) => {\n  const target_to_sort = target || [];\n  const results = target_to_sort.slice(0);\n\n  results.sort(comparer);\n\n  return results;\n});\n\n/**\n * @callback sort~Comparer\n * @param {any} a - first item to compare\n * @param {any} b - second item to compar\n * @returns {Number} - Result of the comparison\n */\n\n/**\n * Sorts an array using an optional comparer. Does not modify the\n * original list, rather returns a new array containing the results\n * sorted using the comparer\n *\n * @param {Array | sort~Comparer} comparer_or_target - If a comparer is provided,\n * the comparer will be used to perform the comparison of items to one another.\n * If a comparer is not provided, the default comparer will be used.\n *\n * @example <caption>Sort all numbers in an array</caption>\n * let numbers = [4, 2, 1, 10, 5];\n * let result = sort(numbers);\n * console.log(result) // [1, 2, 4, 5, 10]\n *\n * @example <caption>Sort all numbers in an array descending</caption>\n * let numbers = [4, 2, 1, 10, 5];\n * let result = sort((a,b) => b - a, numbers);\n * console.log(result) // [10, 5, 4, 2, 1]\n *\n */\nexport const sort = (comparer_or_target, ...args) => {\n  if (comparer_or_target == null) return [];\n  if (Array.isArray(comparer_or_target))\n    return sort_with_comparer_and_target(default_comparer, comparer_or_target);\n\n  return sort_with_comparer_and_target(comparer_or_target, ...args);\n};\n\nexport const generate = (number, mapper) => map((_, index) => mapper(index), new Array(number).fill(null));\n\nexport default {\n  each,\n  each_until,\n  each_in_reverse,\n  each_in_reverse_until,\n  last,\n  first,\n  all,\n  any,\n  none,\n  filter,\n  map,\n  flat_map,\n  flatten,\n  uniq,\n  true_for_all: all,\n  reduce,\n  sort,\n  min,\n  max,\n  generate\n};\n","import each_property_pair from '@developwithpassion/simple_object_iterator_js';\nimport { any, map, reduce } from '@developwithpassion/arrays_js';\nimport curry from '@developwithpassion/curry_js';\n\nexport const freeze = Object.freeze;\n\nexport const prevent_modifications = the_target => {\n  freeze(the_target);\n  Object.preventExtensions(the_target);\n  return the_target;\n};\n\nexport const unless = (condition, block) => {\n  if (condition) return;\n  block();\n};\n\nexport const create_immutable_builder = builder => (...args) => {\n  const instance = builder.apply(null, args);\n  prevent_modifications(instance);\n  return instance;\n};\n\nexport const exclude_keys = curry((keys_and_key_specs, target) => {\n  const normalized_specs = map(\n    spec_or_key => (typeof spec_or_key === 'string' ? value => value === spec_or_key : spec_or_key),\n    keys_and_key_specs\n  );\n\n  const result = {};\n\n  each_property_pair(target, (key, value) => {\n    if (!any(spec => spec(key), normalized_specs, target)) result[key] = value;\n  });\n\n  return result;\n});\n\nexport const create_delegator_for_missing_methods = (initial, missing_target) =>\n  new Proxy(initial, {\n    get(object, property) {\n      let actual_target = Reflect.has(object, property) ? object : missing_target;\n      return Reflect.get(actual_target, property);\n    }\n  });\n\nexport const values = target =>\n  reduce(\n    [],\n    (acc, key) => {\n      acc.push(target[key]);\n      return acc;\n    },\n    Object.keys(target)\n  );\n\nexport default {\n  freeze,\n  values,\n  prevent_modifications,\n  unless,\n  create_immutable_builder,\n  create_delegator_for_missing_methods,\n  exclude_keys\n};\n","import { reduce } from '@developwithpassion/arrays_js';\nimport curry from '@developwithpassion/curry_js';\n\nexport const nested_property_accessor = curry((dotted_accessor, object) =>\n  reduce(\n    object,\n    (current_target, next_attribute) => current_target[next_attribute],\n    dotted_accessor.split('.')\n  )\n);\n","import curry from '@developwithpassion/curry_js';\nimport { nested_property_accessor } from './nested_property_accessor';\n\nexport const nested_property_setter = curry((dotted_accessor, value, object) => {\n  const attributes = dotted_accessor.split('.');\n  const traversal_attributes =\n    attributes.length > 1 ? attributes.slice(0, attributes.length - 1) : attributes;\n  const target_path = traversal_attributes.join('.');\n  const last_attribute = attributes[attributes.length - 1];\n\n  const target = attributes.length > 1 ? nested_property_accessor(target_path, object) : object;\n\n  target[last_attribute] = value;\n\n  return object;\n});\n","import { reduce } from '@developwithpassion/arrays_js';\nimport curry from '@developwithpassion/curry_js';\n\nexport const default_key_mapper = ({ id }) => id;\n\nexport const to_object = curry((key_mapper, data) =>\n  reduce(\n    {},\n    (acc, cur) => {\n      acc[key_mapper(cur)] = cur;\n      return acc;\n    },\n    data\n  )\n);\n"]}